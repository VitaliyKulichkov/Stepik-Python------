# Реализуйте структуру данных, представляющую собой расширенную структуру стек. Необходимо поддерживать добавление элемента на вершину стека, удаление с вершины стека, и необходимо поддерживать операции сложения, вычитания, умножения и целочисленного деления.
#
# Операция сложения на стеке определяется следующим образом. Со стека снимается верхний элемент (top1), затем снимается следующий верхний элемент (top2), и затем как результат операции сложения на вершину стека кладется элемент, равный top1 + top2.
#
# Аналогичным образом определяются операции вычитания (top1 - top2), умножения (top1 * top2) и целочисленного деления (top1 // top2).
#
# Реализуйте эту структуру данных как класс ExtendedStack, отнаследовав его от стандартного класса list.
# Требуемая структура класса:
# class ExtendedStack(list):
#     def sum(self):
#         # операция сложения
#
#     def sub(self):
#         # операция вычитания
#
#     def mul(self):
#         # операция умножения
#
#     def div(self):
#         # операция целочисленного деления
# Примечание
# Для добавления элемента на стек используется метод append, а для снятия со стека – метод pop.
# Гарантируется, что операции будут совершаться только когда в стеке есть хотя бы два элемента.

class ExtendedStack(list):
    def sum(self):
        # операция сложения
        top1 = self.pop()
        top2 = self.pop()
        summa = (top1+top2)
        self.append(summa)
        return self
    def sub(self):
        # операция вычитания
        top1 = self.pop()
        top2 = self.pop()
        razn = (top1-top2)
        self.append(razn)
        return self
    def mul(self):
        # операция умножения
        top1 = self.pop()
        top2 = self.pop()
        rez = (top1*top2)
        self.append(rez)
        return self
    def div(self):
        # операция целочисленного деления
        top1 = self.pop()
        top2 = self.pop()
        dele = (top1//top2)
        self.append(dele)
        return self